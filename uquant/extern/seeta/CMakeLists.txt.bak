cmake_minimum_required(VERSION 2.8.5)

project(seeta C)

include(GNUInstallDirs)

set(PROJECT_VERSION_MAJOR 1)
set(PROJECT_VERSION_MINOR 0)
set(PROJECT_VERSION_PATCH 0)
set(SEETA_VERSION_SO 1)
set(SEETA_UTILS_VERSION_SO 1)
set(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")


set(custom_compiler_flags)

include(CheckCCompilerFlag)
option(ENABLE_CUSTOM_COMPILER_FLAGS "Enables custom compiler flags" ON)
if (ENABLE_CUSTOM_COMPILER_FLAGS)
    if (("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") OR ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU"))
        list(APPEND custom_compiler_flags
            -std=c++11
            -pedantic
            -Wall
            -Wextra
            -Werror
            -Wstrict-prototypes
            -Wwrite-strings
            -Wshadow
            -Winit-self
            -Wcast-align
            -Wformat=2
            -Wmissing-prototypes
            -Wstrict-overflow=2
            -Wcast-qual
            -Wundef
            -Wswitch-default
            -Wconversion
            -Wc++-compat
            -fstack-protector-strong
            -Wcomma
            -Wdouble-promotion
            -Wparentheses
            -Wformat-overflow
            -Wunused-macros
            -Wmissing-variable-declarations
            -Wused-but-marked-unused
            -Wswitch-enum
            -O3
        )
    elseif("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
        list(APPEND custom_compiler_flags
            /GS
            /Za
            /sdl
            /W4
        )
    endif()
endif()

option(ENABLE_SANITIZERS "Enables AddressSanitizer and UndefinedBehaviorSanitizer." OFF)
if (ENABLE_SANITIZERS)
    list(APPEND custom_compiler_flags
        -fno-omit-frame-pointer
        -fsanitize=address
        -fsanitize=undefined
        -fsanitize=float-divide-by-zero
        -fsanitize=float-cast-overflow
        -fsanitize-address-use-after-scope
        -fsanitize=integer
        -01
        -fno-sanitize-recover
        )
endif()

option(ENABLE_SAFE_STACK "Enables the SafeStack instrumentation pass by the Code Pointer Integrity Project" OFF)
if (ENABLE_SAFE_STACK)
    if (ENABLE_SANITIZERS)
        message(FATAL_ERROR "ENABLE_SAFE_STACK cannot be used in combination with ENABLE_SANITIZERS")
    endif()
    list(APPEND custom_compiler_flags
        -fsanitize=safe-stack
        )
endif()

option(ENABLE_PUBLIC_SYMBOLS "Export library symbols." On)
if (ENABLE_PUBLIC_SYMBOLS)
    list(APPEND custom_compiler_flags -fvisibility=hidden)
    add_definitions(-DSEETA_EXPORT_SYMBOLS -DSEETA_API_VISIBILITY)
endif()
option(ENABLE_HIDDEN_SYMBOLS "Hide library symbols." Off)
if (ENABLE_HIDDEN_SYMBOLS)
    add_definitions(-DSEETA_HIDE_SYMBOLS -USEETA_API_VISIBILITY)
endif()

# apply custom compiler flags
foreach(compiler_flag ${custom_compiler_flags})
    #remove problematic characters
    string(REGEX REPLACE "[^a-zA-Z0-9]" "" current_variable ${compiler_flag})

    CHECK_C_COMPILER_FLAG(${compiler_flag} "FLAG_SUPPORTED_${current_variable}")
    if (FLAG_SUPPORTED_${current_variable})
        list(APPEND supported_compiler_flags)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${compiler_flag}")
    endif()
endforeach()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${supported_compiler_flags}")

#variables for pkg-config
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(libdir "${CMAKE_INSTALL_LIBDIR}")
set(version "${PROJECT_VERSION}")
set(includedir "${CMAKE_INSTALL_INCLUDEDIR}")

option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(ENABLE_TARGET_EXPORT "Enable exporting of CMake targets. Disable when it causes problems!" ON)

#seeta
set(SEETA_LIB seeta)

file(GLOB HEADERS ./src/seeta.h)
set(SOURCES ./src/seeta.c)

option(BUILD_SHARED_AND_STATIC_LIBS "Build both shared and static libraries" Off)
option(SEETA_OVERRIDE_BUILD_SHARED_LIBS "Override BUILD_SHARED_LIBS with SEETA_BUILD_SHARED_LIBS" OFF)
option(SEETA_BUILD_SHARED_LIBS "Overrides BUILD_SHARED_LIBS if SEETA_OVERRIDE_BUILD_SHARED_LIBS is enabled" ON)

if ((SEETA_OVERRIDE_BUILD_SHARED_LIBS AND SEETA_BUILD_SHARED_LIBS) OR ((NOT SEETA_OVERRIDE_BUILD_SHARED_LIBS) AND BUILD_SHARED_LIBS))
    set(SEETA_LIBRARY_TYPE SHARED)
else()
    set(SEETA_LIBRARY_TYPE STATIC)
endif()


if (NOT BUILD_SHARED_AND_STATIC_LIBS)
    add_library("${SEETA_LIB}" "${SEETA_LIBRARY_TYPE}" "${HEADERS}" "${SOURCES}")
else()
    # See https://cmake.org/Wiki/CMake_FAQ#How_do_I_make_my_shared_and_static_libraries_have_the_same_root_name.2C_but_different_suffixes.3F
    add_library("${SEETA_LIB}" SHARED "${HEADERS}" "${SOURCES}")
    add_library("${SEETA_LIB}-static" STATIC "${HEADERS}" "${SOURCES}")
    set_target_properties("${SEETA_LIB}-static" PROPERTIES OUTPUT_NAME "${SEETA_LIB}")
    set_target_properties("${SEETA_LIB}-static" PROPERTIES PREFIX "lib")
endif()
if (NOT WIN32)
    target_link_libraries("${SEETA_LIB}" m)
endif()

if (BUILD_SHARED_AND_STATIC_LIBS)
    install(TARGETS "${SEETA_LIB}-static" DESTINATION "${CMAKE_INSTALL_LIBDIR}")
endif()
if(ENABLE_TARGET_EXPORT)
    # export library information for CMake projects
    install(EXPORT "${SEETA_LIB}" DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/seeta")
endif()

set_target_properties("${SEETA_LIB}"
    PROPERTIES
        SOVERSION "${SEETA_VERSION_SO}"
        VERSION "${PROJECT_VERSION}")

#seeta_Utils
option(ENABLE_SEETA_UTILS "Enable building the seeta_Utils library." OFF)
if(ENABLE_SEETA_UTILS)
    set(SEETA_UTILS_LIB seeta_utils)

    file(GLOB HEADERS_UTILS seeta_Utils.h)
    set(SOURCES_UTILS seeta_Utils.c)

    if (NOT BUILD_SHARED_AND_STATIC_LIBS)
        add_library("${SEETA_UTILS_LIB}" "${SEETA_LIBRARY_TYPE}" "${HEADERS_UTILS}" "${SOURCES_UTILS}")
        target_link_libraries("${SEETA_UTILS_LIB}" "${SEETA_LIB}")
    else()
        add_library("${SEETA_UTILS_LIB}" SHARED "${HEADERS_UTILS}" "${SOURCES_UTILS}")
        target_link_libraries("${SEETA_UTILS_LIB}" "${SEETA_LIB}")
        add_library("${SEETA_UTILS_LIB}-static" STATIC "${HEADERS_UTILS}" "${SOURCES_UTILS}")
        target_link_libraries("${SEETA_UTILS_LIB}-static" "${SEETA_LIB}-static")
        set_target_properties("${SEETA_UTILS_LIB}-static" PROPERTIES OUTPUT_NAME "${SEETA_UTILS_LIB}")
        set_target_properties("${SEETA_UTILS_LIB}-static" PROPERTIES PREFIX "lib")
    endif()

    set_target_properties("${SEETA_UTILS_LIB}"
        PROPERTIES
            SOVERSION "${SEETA_UTILS_VERSION_SO}"
            VERSION "${PROJECT_VERSION}")
endif()

