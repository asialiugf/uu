#include <see_com_common.h>

char errmsg[1024] ;

int SEE_LMA( int           start,
             int           end,
             const double  in[],        /* outReal index and inReal index must be the same */
             int           N,           /* From 0 to 100000                                */
             int           M,           /* M for  M/(N+1)                                  */
                                        /* if M = 2 , LMA(C,N) = EMA(C,N)              */
                                        /* if M = 1 , LMA(C,N) = SMA(C,N,1)            */
                                        /*  M must less than N:optInTimePeriod         */
             double        out[] )      /* out index and in index must be the same     */
                                        /* out 初始化为 -100000 负10万                 */
{
    int    i ;
    double R ;
    double preMA ;

    if ( start<0 )  return -1 ;
    if ( end<0 )  return -1 ;
    if ( M<0 || M>100000 )  return -1 ;
    if ( N<0 || N>100000 )  return -1 ;
    if ( M > N ) return -1 ;

    if( end < start )
    {
        i     =   start ;
        start =   end ;
        end   =   i ;
    }

    if ( M ==2 ) {
        R = (double) M / (double) (N+1) ;
    }else{
        R = (double) M / (double) N ;
    }
    
    if ( N == 0 )
    {
        for ( i=start;i<end;i++ )
        {
            out[i] = (double) 0 ;
        }
        return 0 ;
   }

   if ( N == 1 )
   {
        for ( i=start;i<end;i++ )
        {
            out[i] = in[i] ;
        }
        return 0 ;
   }    

   if ( start == 0 )
   {
        preMA = in[0] ; 
        out[0] = in[0] ;
        for( i=1; i<=end; i++)       
        {
            preMA =( R*( in[i]-preMA ) ) + preMA ;
            out[i] = preMA ; 
        }
    } else {
        if ( out[start-1] <= -99999 ) {
            preMA = in[0] ;
            out[0] = in[0] ;
            for( i=1; i<=end; i++)       
            {
                preMA =( R*( in[i]-preMA ) ) + preMA ;   
                out[i] = preMA ; 
            }   
        }else{
            preMA = out[start-1] ;
            for( i=start; i<=end; i++)
            {
                preMA =( R*( in[i]-preMA ) ) + preMA ;
                out[i] = preMA ; 
                memset( errmsg,'\0',1024) ;
                sprintf( errmsg,"outoutout: %d:%10.4f",i,out[i]) ;
                see_errlog(1000,errmsg,RPT_TO_LOG,0,0 );
            }
        }
    }
    return 0 ;
}

/*
R:=(CLOSE-LLV(LOW,N))/(HHV(HIGH,N)-LLV(LOW,N))*100;
K:=SMA(R,M1,1);
D:=SMA(K,M2,1);
J:=3*K-2*D;
*/


int SEE_KDJ( int           start,
             int           end,
             const double  H[],          /* outReal index and inReal index must be the same */
             const double  L[],          /* outReal index and inReal index must be the same */
             const double  C[],          /* outReal index and inReal index must be the same */
             double        *preH,        /* pre highest price */
             double        *preL,        /* pre lowest price */
             int           N,            /* R:=(CLOSE-LLV(LOW,N))/(HHV(HIGH,N)-LLV(LOW,N))*100; */
             int           M1,           /* K:=SMA(R,M1,1);                                     */
             int           M2,           /* D:=SMA(K,M2,1);                                     */
             double        R[],          /* R:=(CLOSE-LLV(LOW,N))/(HHV(HIGH,N)-LLV(LOW,N))*100; */
             double        K[],          /*    */
             double        D[],
             double        J[] )
{
    int    i ;
    int    k ;
    int    flag ;
    double Hest ;
    double Lest ;

    if ( start<0 )  return -1 ;
    if ( end<0   )  return -1 ;
    if ( N<1 ||  N>100000 )  return -1 ;
    if ( M1<1 || M1>100000 )  return -1 ;
    if ( M2<1 || M2>100000 )  return -1 ;
    if ( end < start ) return -1 ;
/*
    R:=(CLOSE-LLV(LOW,N))/(HHV(HIGH,N)-LLV(LOW,N))*100;

    0 ........... N .....................
    s .. e ...... N .....................
    0 .. s ..e .. N .....................
    0 .. s .......N .. e ................
    0 ........... N ...s ... e ..........
*/
       


    /* 计算R[] */

    flag=0;

    if ( !(start>0 && R[start-1]>=0) )  // ------------
    {
        Hest = H[0] ;
        Lest = L[0] ;
        if ( Hest-Lest != 0 ) 
        { 
           R[0] = (C[0]-Lest)/(Hest-Lest)*100 ;
        }else{
            R[0] = 50 ;
        }

        if( end < N ) {
            for( i=1; i<=end; i++ ) {
                if( H[i]==L[i]) {
                    if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                    if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                } else { flag=0; }
                if( H[i]>Hest ) { Hest = H[i]; }
                if( L[i]<Lest ) { Lest = L[i]; }
                if ( Hest-Lest != 0 )
                {
                    R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                }else{
                    if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                }
            }
        }
        if ( end >= N ) {
            for( i=1; i<N; i++ )
            {
                if( H[i]==L[i]) {
                    if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                    if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                } else { flag=0; }
                if( H[i]>Hest ) { Hest = H[i]; }
                if( L[i]<Lest ) { Lest = L[i]; }
                if ( Hest-Lest != 0 )
                {
                    R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                }else{
                    if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                }
            }
            for( i=N; i<end; i++ )
            {
                if( H[i]==L[i]) {
                    if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                    if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                } else { flag=0; }
                if ( H[i-N]<Hest ) {
                    if( H[i]>Hest ){ Hest = H[i]; }
                } else {
                    Hest = H[i-N+1] ; 
                    for ( k=1;k<=N;k++ )
                    {
                       if ( Hest<H[i-N+k] ) { Hest=H[i-N+k] ; } 
                    } 
                }
                if ( L[i-N]>Lest ) {
                    if( L[i]<Hest ){ Lest = L[i]; }
                } else {
                    Lest = L[i-N+1] ;
                    for ( k=1;k<=N;k++ )
                    {
                       if ( Lest>L[i-N+k] ) { Lest=L[i-N+k] ; }
                    }
                }

                if ( Hest-Lest != 0 )
                {
                    R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                }else{
                    if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                }
            }
        }
        *preH = Hest ;
        *preL = Lest ;

    } else {  // start>0 && R[start-1] 有数据  
        if( end < N ) {
            if ( *preH < 0 || *preL < 0 ) {
                Hest = H[0] ;
                Lest = H[0] ;
                for ( k=1;k<=start-1;k++ ) {
                    if( H[k]>Hest ) { Hest = H[k]; }
                    if( L[k]<Lest ) { Lest = L[k]; }
                }
            } else { Hest = *preH ; Lest = *preL ; }

            for( i=start; i<=end; i++ ) {
                if( H[i]==L[i]) {
                    if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                    if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                } else { flag=0; }
                if( H[i]>Hest ) { Hest = H[i]; }
                if( L[i]<Lest ) { Lest = L[i]; }
                if ( Hest-Lest != 0 )
                {
                    R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                }else{
                    if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                }
            }
        }
        if( end >= N ) {
            if ( start < N ) {
                if ( *preH < 0 || *preL < 0 ) {
                    Hest = H[0] ;
                    Lest = H[0] ;
                    for ( k=1;k<=start-1;k++ ) {
                        if( H[k]>Hest ) { Hest = H[k]; }
                        if( L[k]<Lest ) { Lest = L[k]; }
                    }
                } else { Hest = *preH ; Lest = *preL ; }

                for( i=start; i<N; i++ ) {
                    if( H[i]==L[i]) {
                        if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                        if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                    } else { flag=0; }
                    if( H[i]>Hest ) { Hest = H[i]; }
                    if( L[i]<Lest ) { Lest = L[i]; }
                    if ( Hest-Lest != 0 )
                    {
                        R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                    }else{
                        if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                    }
                }
                for( i=N; i<end; i++ )
                {
                    if( H[i]==L[i]) {
                        if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                        if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                    } else { flag=0; }
                    if ( H[i-N]<Hest ) {
                        if( H[i]>Hest ){ Hest = H[i]; }
                    } else {
                        Hest = H[i-N+1] ;
                        for ( k=1;k<=N;k++ )
                        {
                            if ( Hest<H[i-N+k] ) { Hest=H[i-N+k] ; }
                        }
                    }
                    if ( L[i-N]>Lest ) {
                        if( L[i]<Hest ){ Lest = L[i]; }
                    } else {
                        Lest = L[i-N+1] ;
                        for ( k=1;k<=N;k++ )
                        {
                            if ( Lest>L[i-N+k] ) { Lest=L[i-N+k] ; }
                        }
                    }

                    if ( Hest-Lest != 0 )
                    {
                        R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                    }else{
                        if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                    }
                }   
            }

            if ( start >=N ) {
                if ( *preH < 0 || *preL < 0 ) {
                    Hest = H[start-N] ;
                    Lest = H[start-N] ;
                    for ( k=start-N+1;k<=start-1;k++ ) {
                        if( H[k]>Hest ) { Hest = H[k]; }
                        if( L[k]<Lest ) { Lest = L[k]; }
                    }
                } else { Hest = *preH ; Lest = *preL ; }

                for( i=start; i<=end; i++ ) {
                    if( H[i]==L[i]) {
                        if( C[i]>=H[i-1] && C[i]>L[i-1] ) { flag=1;  }
                        if( C[i]<=L[i-1] && C[i]<H[i-1] ) { flag=-1; }
                    } else { flag=0; }
                    if ( H[i-N]<Hest ) {
                        if( H[i]>Hest ){ Hest = H[i]; }
                    } else {
                        Hest = H[i-N+1] ;
                        for ( k=1;k<=N;k++ )
                        {
                            if ( Hest<H[i-N+k] ) { Hest=H[i-N+k] ; }
                        }
                    }
                    if ( L[i-N]>Lest ) {
                        if( L[i]<Hest ){ Lest = L[i]; }
                    } else {
                        Lest = L[i-N+1] ;
                        for ( k=1;k<=N;k++ )
                        {
                            if ( Lest>L[i-N+k] ) { Lest=L[i-N+k] ; }
                        }
                    }

                    if ( Hest-Lest != 0 )
                    {
                        R[i] = (C[i]-Lest)/(Hest-Lest)*100 ;
                    }else{
                        if (flag==1){R[i]=100;}else if(flag==-1){R[i]=0;}else if(flag==0){R[i]=50;}
                    }
                }
            }
        }
        *preH = Hest ;
        *preL = Lest ;
    }
    if ( start == 0 )
    {
        SEE_LMA( start, end, &R[0], M1, 1, &K[0]) ;
        SEE_LMA( start, end, &K[0], M2, 1, &D[0]) ;
        for ( i=start;i<=end;i++ )
        {
            J[i] = 3*K[i] - 2*D[i] ;
        }
    }
    return 0 ;
}
