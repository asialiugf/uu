#include <see_com_common.h>

const char ca_pubsub_url[] = "ipc:///tmp/pubsub.ipc" ;
const char ca_mysql_url[]  = "mysql://127.0.0.1/test?user=root&password=root" ;
static char ca_tick_file[512] ;


static char ca_futures[FUTURE_NUMBER][FUTRUE_ID_LEN] ;
static char *pp_futures[FUTURE_NUMBER];

/*
static see_bar_t bar_1s[2] ; 
static see_bar_t bar_5s[2] ;
static see_bar_t bar_10s[2] ;
static see_bar_t bar_15s[2] ;
static see_bar_t bar_30s[2] ;
static see_bar_t bar_1f[2] ;
static see_bar_t bar_3f[2] ;
static see_bar_t bar_5f[2] ;
static see_bar_t bar_10f[2] ;
static see_bar_t bar_15f[2] ;
static see_bar_t bar_30f[2] ;
static see_bar_t bar_1h[2] ;
static see_bar_t bar_2h[2] ;
static see_bar_t bar_3h[2] ;
static see_bar_t bar_4h[2] ;
static see_bar_t bar_d[2] ;
static see_bar_t bar_w[2] ;
static see_bar_t bar_m[2] ;
static see_bar_t bar_s[2] ;
static see_bar_t bar_y[2] ;
*/

static see_bar_t * pp_bar_1s[100][2] ; 
static see_bar_t * pp_bar_5s[100][2] ;
static see_bar_t * pp_bar_10s[100][2] ;
static see_bar_t * pp_bar_15s[100][2] ;
static see_bar_t * pp_bar_30s[100][2] ;
static see_bar_t * pp_bar_1f[100][2] ;
static see_bar_t * pp_bar_3f[100][2] ;
static see_bar_t * pp_bar_5f[100][2] ;
static see_bar_t * pp_bar_10f[100][2] ;
static see_bar_t * pp_bar_15f[100][2] ;
static see_bar_t * pp_bar_30f[100][2] ;
static see_bar_t * pp_bar_1h[100][2] ;
static see_bar_t * pp_bar_2h[100][2] ;
static see_bar_t * pp_bar_3h[100][2] ;
static see_bar_t * pp_bar_4h[100][2] ;
static see_bar_t * pp_bar_d[100][2] ;
static see_bar_t * pp_bar_w[100][2] ;
static see_bar_t * pp_bar_m[100][2] ;
static see_bar_t * pp_bar_s[100][2] ;
static see_bar_t * pp_bar_y[100][2] ;

static see_bar_t * ppp_bars[100][BAR_1Y][2] ;

static int i_index ;

int
main(int iArgCnt, char *pcaArgVec[])
{
    int i_rtn =0 ;
    char ca_errmsg[100] ;
    int sock ;
    char *buf = NULL;
    struct CThostFtdcDepthMarketDataField * market_data ;

    see_signal_init() ;                 // 需要详细考虑 
    signal(SIGHUP, SIG_IGN);
    signal(SIGPIPE, SIG_IGN);
    see_daemon(1,0) ;



    i_rtn = see_futures_init(pp_futures,ca_futures) ;                 // 初始化 future 列表
    if ( i_rtn != 0 ){
        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"main: see_futures_init error : %d\n", i_rtn ) ;
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
    }
 


    int i = 0 ;
    while ( pp_futures[i] != NULL ) {
        int j = 0 ;
        while ( j <= BAR_1Y ) {
            pp_bar_1s[i][j][0] = see_create_bar( pp_futures[i],(char)j );
            pp_bar_1s[i][j][1] = see_create_bar( pp_futures[i],(char)j );
            j++ ;
        }
        pp_bar_1s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_5s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_10s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_15s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_30s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_1f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_3f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_5f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_10f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_15f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_30f[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_1h[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_2h[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_3h[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_4h[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_d[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_w[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_m[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_s[i][0] = see_create_bar( pp_futures[i] );
        pp_bar_y[i][0] = see_create_bar( pp_futures[i] );

        pp_bar_1s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_5s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_10s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_15s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_30s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_1f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_3f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_5f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_10f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_15f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_30f[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_1h[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_2h[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_3h[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_4h[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_d[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_w[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_m[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_s[i][1] = see_create_bar( pp_futures[i] );
        pp_bar_y[i][1] = see_create_bar( pp_futures[i] );

/* ---------- */
        pp_bar_1s[i][0]->o = i ;
        pp_bar_1s[i][0]->c = i+100 ;
        pp_bar_1s[i][1]->o = i ;
        pp_bar_1s[i][1]->c = i+100 ;
        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"----!!!!!!!!!!!-futures:-------  %s\n", pp_bar_10s[i][1]->InstrumentID ) ;
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
/* ---------- */

        i++ ;
    }


/* ---------- 
    i_index = 0 ;
    while (pp_futures[i_index] != NULL ) {
        if (strcmp(pp_futures[i_index],"ag1702") == 0 ){
            break ;
        }
        i_index ++ ;
    }
    memset( ca_errmsg,'\0',100 );
    sprintf( ca_errmsg,"-----futures:----pp_bars[i_index][1]---  %f \n", pp_bar_1s[i_index][1]->o_value) ;
    see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
 ---------- */

    sock = see_pubsub_client( ca_pubsub_url, "iostest" ) ;

    while (1)                                                         //  接收数据 并进行处理 
    {
        struct timeval start, end;

        gettimeofday( &start, NULL );
        int bytes = nn_recv (sock, &buf, NN_MSG, 0);                  // 如果没有数据，进程会等在这里，这时
                                                                      // 如果收到signal 后，会进入到自己写的信号处理程序
                                                                      // 然后程序会往下走，buf没有分配内存，所以会出报SIGSEG信号。
                                                                      // 如果在前面 忽略如SIGHUP信号，则不会进入到 信号处理程序
        gettimeofday( &end,NULL );


        market_data = (struct CThostFtdcDepthMarketDataField *)buf ; 
        i_index = 0 ;
        while (pp_futures[i_index] != NULL ) {
            if (strcmp(pp_futures[i_index],market_data->InstrumentID) == 0 ){
                break ;
            }
            i_index ++ ;
        }
/*   这里要开始计算 K线了 */
/*---------------------------*/
        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"==== iosmain ===== ================ recieved: %d \n",market_data->AskVolume5 ) ;
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
/*---------------------------*/

        char ca_tmp[3] ;
        memset( ca_tmp,'\0',3 ) ;
        memcpy( ca_tmp,market_data->UpdateTime,2 );
        memset( ca_tick_file,'\0',512 ) ;
        sprintf( ca_tick_file, "tick-%s-%s-%s.bin",market_data->InstrumentID, \
                                                   market_data->TradingDay, \
                                                   ca_tmp ) ;


        see_save_file(ca_tick_file,buf,bytes) ;


        nn_freemsg (buf);


        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"==== time =========: sec:%lu usec:%lu \n",end.tv_sec-start.tv_sec,end.tv_usec-start.tv_usec ) ;
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;


       // usleep(2000) ;

    }

    return SEE_OK;
}
