// testTraderApi.cpp : 定义控制台应用程序的入口点。
//
#include <iostream>
#include <string.h>
#include "ThostFtdcMdApi.h"
#include "MdSpi.h"
#include <pthread.h>
#include <unistd.h>

extern "C"
{
    #include <see_com_common.h>
}
char ca_errmsg[100] ;

/* =========== testing ================== */
int pub_sock ;
int msg_len = sizeof( CThostFtdcDepthMarketDataField ) ;
const char myurl1[] = "ipc:///tmp/pubsub.ipc" ;
/* =========== testing ================== */

using namespace std;

CThostFtdcMdApi* pUserApi1;                             // UserApi对象

char FRONT_ADDR1[] = "tcp://180.168.146.187:10010";		// 前置地址
char FRONT_ADDR2[] = "tcp://180.168.146.187:10011";		// 前置地址
char FRONT_ADDR3[] = "tcp://218.202.237.33:10012";		// 前置地址

TThostFtdcBrokerIDType	 BROKER_ID = "9999";			// 经纪公司代码
TThostFtdcInvestorIDType INVESTOR_ID = "068520";		// 投资者代码
TThostFtdcPasswordType   PASSWORD = "*****";		    // 用户密码

char ca_futures[FUTURE_NUMBER][FUTRUE_ID_LEN] ;
char *ppFutureID[FUTURE_NUMBER];                        // 行情订阅列表

int iInstrumentID = 0;									// 行情订阅数量
int iRequestID = 1;                                     // 请求编号

int
main(int argc,char *argv[])
{

/* ----------------------------  */
    pub_sock = see_pubsub_server( myurl1 ) ;

    //sleep(5);
    CThostFtdcDepthMarketDataField market_data ;

    int i = 0 ;
    while(1) {
        time_t timer;
        struct tm* t_tm = localtime(&timer);
        char ca_date[9] ;
        char ca_time[9] ;

        time(&timer);
        memset( ca_date,'\0',9 );
        memset( ca_time,'\0',9 );
        strftime(ca_date,9,"%Y%m%d",t_tm);
        strftime(ca_time,9,"%H:%M:%S",t_tm);

        /* ---------
        memset( ca_errmsg,'\0',100 );
        strftime(ca_errmsg,100,"today is: %Y%m%d-%H:%M:%S",t_tm);
        see_errlog(1000,ca_errmsg,RPT_TO_LOG,0,0);
        ---------- */

        memset((char *)&market_data,'\0',msg_len) ;

        see_errlog(1000,ca_date,RPT_TO_LOG,0,0 ) ;

        memcpy(&market_data.TradingDay,ca_date,8) ;
        memcpy(&market_data.InstrumentID,"su1701",6) ;
        market_data.LastPrice =(double) i ;
        market_data.PreSettlementPrice =(double) i ;
        market_data.PreClosePrice =(double) i ;
        market_data.PreOpenInterest =(double) i ;
        market_data.OpenPrice =(double) i ;
        market_data.HighestPrice =(double) i ;
        market_data.LowestPrice =(double) i ;
        market_data.Volume = i ;
        market_data.Turnover =(double) i ;
        market_data.OpenInterest =(double) i ;
        market_data.ClosePrice =(double) i ;
        market_data.SettlementPrice =(double) i ;
        market_data.UpperLimitPrice =(double) i ;
        market_data.LowerLimitPrice =(double) i ;
        market_data.PreDelta =(double) i ;
        market_data.CurrDelta =(double) i ;       
        memcpy(&market_data.UpdateTime,ca_time,8) ;    
        market_data.UpdateMillisec = i+10000 ;        
        market_data.BidPrice1 =(double) i ;     
        market_data.BidVolume1 = i ;        
        market_data.AskPrice1 =(double) i ;    
        market_data.AskVolume1 = i ;        
        market_data.BidPrice2 =(double) i ;    
        market_data.BidVolume2 = i ;
        market_data.AskPrice2 =(double) i ;
        market_data.AskVolume2 = i ;
        market_data.BidPrice3 =(double) i ;
        market_data.BidVolume3 = i ;
        market_data.AskPrice3 =(double) i ;
        market_data.AskVolume3 = i ;
        market_data.BidPrice4 =(double) i ;
        market_data.BidVolume4 = i ;
        market_data.AskPrice4 =(double) i ;
        market_data.AskVolume4 = i ;
        market_data.BidPrice5 =(double) i ;
        market_data.BidVolume5 = i ;
        market_data.AskPrice5 =(double) i ;
        market_data.AskVolume5 = i ;
        market_data.AveragePrice =(double) i ;
        memcpy(&market_data.ActionDay,ca_date,8) ;


        int bytes = nn_send (pub_sock, (char *) &market_data, msg_len, 0);
        if ( bytes == msg_len ){
            memset( ca_errmsg,'\0',100 );
            sprintf( ca_errmsg,"------msg_len:%d bytes_send:%d number:%d \n", msg_len,bytes,i ) ; 
            see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
        }
        //usleep(10);
        i++ ;

        if ( i == 1000 ) { exit (0); }
    }
/* ----------------------------  */


    int i_rtn = 0 ;
    i_rtn = see_futures_init(ppFutureID,ca_futures) ;              // 初始化 future 列表
    if ( i_rtn != 0 ){
        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"main: see_futures_init error : %d\n", i_rtn ) ; 
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
    }


    pthread_t pthID = pthread_self();    
    cerr << "================main 01 =============================  pthId:" << pthID << endl;


	// 初始化UserApi
    iInstrumentID = 0;
	pUserApi1 = CThostFtdcMdApi::CreateFtdcMdApi("1.con");			// 创建UserApi
	CThostFtdcMdSpi* pUserSpi1 = new CMdSpi();                      // 创建UserSpi  可以创建多个
	pUserApi1->RegisterSpi(pUserSpi1);      						// 注册事件类
	pUserApi1->RegisterFront(FRONT_ADDR2);	           				// connect

	pUserApi1->Init();
    cout << "after Init() !" << endl;

    pthID = pthread_self();
    cerr << "================main 02 =============================  pthId:" << pthID << endl;

	pUserApi1->Join();
    cout << "after Join() !" << endl;

    pthID = pthread_self();
    cerr << "03 pthId:" << pthID << endl;

    //	pUserApi->Release();

} /* end of main() */
