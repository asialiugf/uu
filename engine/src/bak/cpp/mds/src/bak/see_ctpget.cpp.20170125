#include <iostream>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include "ThostFtdcMdApi.h"
//#include <AAextern.h>
#include "MdSpi.h"

extern "C"
{
    #include <see_com_common.h>
    double hh[10000] ;
    double ll[10000] ;
    double cc[10000] ;
    double oo[10000] ;
}

int test = 0 ;

/*
*   FUTURE_NUMBER ：表示有多少个期货。
*   pc_futures 是指针数组，经过  i_rtn = see_futures_init(pc_futures,ca_futures) ;
*   进行初始化，see_futures_init 会从../../etc/tbl/see_future_table文件里读出有哪些期货，
*   并将这些期货初始化到 ca_futures和pc_futures中
*/

using namespace std;
/*   globle parameters !!!  */
char                ca_futures     [FUTURE_NUMBER][FUTRUE_ID_LEN] ;
char               *pc_futures     [FUTURE_NUMBER];                     // 行情订阅列表
see_block_t        *pt_blocks      [FUTURE_NUMBER];                     // 每个future有一个block !
see_hours_t         t_hours        [SEE_HOUR_TYPE_NUM] ;                // 和../../etc/tbl/see_trade_time 里面的行数一致！
see_config_t        gt_conf ;

/*   globle parameters !!!  */

char ca_errmsg[256] ;
char ca_jsonfile[] = "../../etc/json/see_brokers.json" ;

CThostFtdcMdApi* pUserApi1;                             // UserApi对象

// char FRONT_ADDR1[] = "tcp://180.168.146.187:10010";		// 前置地址
// char FRONT_ADDR2[] = "tcp://180.168.146.187:10011";		// 前置地址
// char FRONT_ADDR3[] = "tcp://218.202.237.33:10012";		// 前置地址
// char FRONT_ADDR4[] = "tcp://180.166.65.119:41213";		// 前置地址  招商期货
// char FRONT_ADDR4[] = "tcp://180.166.65.119:41213";		// 前置地址  招商期货
//char FRONT_ADDR4[] = "tcp://180.168.214.245:41213";		// 前置地址  招商期货
char FRONT_ADDR4[] = "tcp://116.228.246.81:41213";		// 前置地址  招商期货
// char ca_front[256];		// 前置地址  招商期货

// TThostFtdcBrokerIDType	 BROKER_ID = "9999";			// 经纪公司代码
// TThostFtdcInvestorIDType INVESTOR_ID = "068520";		// 投资者代码
// TThostFtdcPasswordType   PASSWORD = "*****";		    // 用户密码

// TThostFtdcBrokerIDType	 BROKER_ID = "8060";			// 经纪公司代码 招商期货
TThostFtdcBrokerIDType	    BROKER_ID       = "8070";			// 经纪公司代码 招商期货
TThostFtdcInvestorIDType    INVESTOR_ID     = "********";		// 投资者代码
TThostFtdcPasswordType      PASSWORD        = "******";		    // 用户密码


int     iInstrumentID = 3;									// 行情订阅数量
int     iRequestID = 1;                                     // 请求编号

cJSON   *json ;
cJSON   *broker ;
cJSON   *ip ;

int
main(int argc,char *argv[])
{

    char 
    see_signal_init() ;

    see_config_init( &gt_conf );
 
//    see_daemon(1,0) ;
   /*
    see_file_to_json(ca_jsonfile,&json) ; 

    broker = cJSON_GetObjectItem(json, "broker2");   
    if( broker == NULL ) {
        printf ( " broker GetObjectItemi error~  \n " ) ;
    }
    
    printf ("%s\n",cJSON_Print(broker)) ; 
    printf ("%s \n",broker->string );
    printf ("%s \n",broker->next->string );
    printf ( " iiiiiiiiiiiii GetObjectItem  \n " ) ;

    ip = cJSON_GetObjectItem(broker, "ip");
    if( ip == NULL ) {
        printf ( " ip GetObjectItemi error~  \n " ) ;
    }

    printf ( " iiiiiiiiiiiiippppppppppppp GetObjectItem  \n " ) ;
    printf("json test : broker ip: %s\n", ip->valuestring);
    printf ( " iiiiiiiiiiiiippppppppppppp GetObjectItem  \n " ) ;
    // cJSON_Print(const cJSON *item);
    */

    /* ------------------------------------------- */
    see_file_to_json((char*)"../../etc/json/see_trade_time.json", &json) ;

    broker = cJSON_GetObjectItem(json, "futures");
    if( broker == NULL ) {
        printf ( " SR GetObjectItemi error~  \n " ) ;
    }

    
    broker = cJSON_GetObjectItem(json, "futures");
    if( broker == NULL ) {
        printf ( " SR GetObjectItemi error~  \n " ) ;
    }

    broker = cJSON_GetObjectItem(broker, "cu");
    if( broker == NULL ) {
        printf ( " SR GetObjectItemi error~  \n " ) ;
    }


    broker = cJSON_GetObjectItem(broker, "time_type");
    if( broker == NULL ) {
        printf ( " SR GetObjectItemi error~  \n " ) ;
    }


    printf ("%s\n",cJSON_Print(broker)) ;
    printf ("%s\n",broker->string );
    printf("value:%d\r\n",broker->valueint);  
    //printf ("%s\n",broker->next->string );
    printf ( " iiiiiiiiiiiii GetObjectItem  \n " ) ;



    see_file_to_json((char*)"../../etc/json/see_conf.json", &json) ;

    int size = cJSON_GetArraySize(json);
    printf("see_conf len: %d\n",size);


    broker = cJSON_GetObjectItem(json, "futures");
    if( broker == NULL ) {
        printf ( " SR GetObjectItemi error~  \n " ) ;
    }
    printf ("futures-------------------:%s\n",broker->string );

    size = cJSON_GetArraySize(broker);
    printf("futures len: %d\n",size);


    cJSON *arrayItem;
    int u ;
    for( u=0;u<size;u++ )
    {
        arrayItem = cJSON_GetArrayItem(broker,u);
        if(arrayItem)
        {
             printf ("%s\n",arrayItem->string );
        }
    }


    //exit(1) ;

    // cJSON_Print(const cJSON *item);

    /* ------------------------------------------- */

    int i_rtn = 0 ;
    int i ;

    i_rtn = see_futures_init(pc_futures,ca_futures) ;                   // 初始化 future 列表
    if ( i_rtn != 0 ){
        memset( ca_errmsg,'\0',100 );
        sprintf( ca_errmsg,"main: see_futures_init error : %d\n", i_rtn ) ;
        see_errlog( 1000,ca_errmsg,RPT_TO_LOG,0,0 ) ;
    }
    see_trading_hours_init( &t_hours[0] ) ;

    /* --------- create block  for each future ------------ begin ------------ */
    i = 0 ;
    while ( pc_futures[i] != NULL ) {
        pt_blocks[i] = (see_block_t *)malloc(sizeof(see_block_t)) ;    //为每个future分配了一个block, 用于计算不同周期的K柱.
        if (pt_blocks[i] == NULL ) {
            see_errlog( 1000,(char *)"create k bar error!\n",RPT_TO_LOG,0,0 ) ;
        }
        see_block_init( pt_blocks[i], pc_futures[i], &t_hours[0] ) ;
        i++ ;
    }
    /* ------------------------------------------- */


    iInstrumentID = 100;
	pUserApi1 = CThostFtdcMdApi::CreateFtdcMdApi("1.con");			// 创建UserApi 
	CThostFtdcMdSpi* pUserSpi1 = new CMdSpi();                      // 创建UserSpi  可以创建多个


	pUserApi1->RegisterSpi(pUserSpi1);      						// 注册事件类
	pUserApi1->RegisterFront(FRONT_ADDR4);	           				// connect

	pUserApi1->Init();
    cout << "after Init() !" << endl;

    //pUserApi1->SubscribeMarketData(pc_futures, iInstrumentID);  
    //cout << "  pUserApi1->SubscribeMarketData !!!" << endl ;

    pthread_t pthID = pthread_self();
    cerr << "================main 02 =============================  pthId:" << pthID << endl;

	pUserApi1->Join();
    cout << "after Join() !" << endl;

    pthID = pthread_self();
    cerr << "03 pthId:" << pthID << endl;

    //	pUserApi->Release();

} /* end of main() */
