#include <see_com_common.h>

extern  double hh[10000] ;
extern  double ll[10000] ;
extern  double cc[10000] ;
extern  double oo[10000] ;

int       outBegIdx1 ;
int       outBegIdx2 ;
int       outBegIdx3 ;
int       outNBElement1 ;
int       outNBElement2 ;
int       outNBElement3 ;
double    HighestPrice1 ;
double    HighestPrice2 ;
double    HighestPrice3 ;
double    LowestPrice1 ;
double    LowestPrice2 ;
double    LowestPrice3 ;
double    outSlowK1[10000] ;
double    outSlowD1[10000] ;
double    outSlowJ1[10000] ;
double    J1[10000] ;
double    JE1[10000] ;
double    outSlowK2[10000] ;
double    outSlowD2[10000] ;
double    outSlowJ2[10000] ;
double    J2[10000] ;
double    JE2[10000] ;
double    outSlowK3[10000] ;
double    outSlowD3[10000] ;
double    outSlowJ3[10000] ;
double    J3[10000] ;
double    JE3[10000] ;

static int i_index = 0 ;


int
see_bars_index_forword (int start_index, int n)   // bar指针前移n个.
{
    int rtn ;
    if ( n >= MAX_BARS_LEN ) { return -1 ; }
    rtn = start_index + n ;
    if ( rtn >= MAX_BARS_LEN )
    {
        rtn = rtn - MAX_BARS_LEN  ;
    }
    return rtn ;
}

int
see_bars_index_back (int start_index, int n)  //bar指针后移n个。
{
    int rtn ;
    if ( n >= MAX_BARS_LEN ) { return -1 ; }
    rtn = start_index -n ;
    if ( rtn < 0 )
    {
        rtn = rtn + MAX_BARS_LEN ;
    }
    return rtn ;
}

int
see_bars_load (see_bar_t bars[], int start_index, int n)  // 从start_index开始装 n 个 bar的数据，装完后，需要将 g_bar_cur_index 改成 start_index + n -1  ;
{
    int rtn = 0 ;
    int i ;
    for ( i = start_index ; i < start_index+n ; i++ )
    {
        bars[i].o = i ;
        bars[i].c = i ;
        bars[i].h = i ;
        bars[i].l = i ;
    }
    return rtn ;
}
int
see_bars_calc_bar_1s ( see_bar_t * bar )
{
    int rtn = 0 ;
    bar->o = 100 ;
    bar->c = 100 ;
    bar->h = 100 ;
    bar->l = 100 ;
    return rtn ;
}

int 
see_date_comp( char * pca_first, char * pca_last )
{
    
    int i_rtn ;
    char ca_first[9] ;
    char ca_last[9] ;
    if( strlen(pca_first) < 8 ){
        see_errlog(1000,"see_date_comp: input error!",RPT_TO_LOG,0,0) ;
    }
    if( strlen(pca_last) < 8 ){
        see_errlog(1000,"see_date_comp: input error!",RPT_TO_LOG,0,0) ;
    }
    memset(ca_first,'\0',9) ;
    memset(ca_last,'\0',9) ;
    memcpy(ca_first,pca_first,8) ;
    memcpy(ca_last,pca_last,8) ;
    i_rtn = strcmp ( ca_first,ca_last ) ;
    return i_rtn ;
}

int 
see_time_comp( char * f, char * l )  // 比较时间，输出秒 格式：06:33:26
{
    char f_h[3] = "\0\0\0" ;
    char f_m[3] = "\0\0\0" ;
    char f_s[3] = "\0\0\0" ;

    char l_h[3] = "\0\0\0" ;
    char l_m[3] = "\0\0\0" ;
    char l_s[3] = "\0\0\0" ;

    int fh,fm,fs,lh,lm,ls ;

    time_t f_sec;
    time_t l_sec;

    struct tm f_time_fields;
    struct tm l_time_fields;

    memcpy(f_h,f,2);
    memcpy(f_m,f+3,2);
    memcpy(f_s,f+6,2);

    memcpy(l_h,l,2);
    memcpy(l_m,l+3,2);
    memcpy(l_s,l+6,2);

    fh = atoi(f_h);
    fm = atoi(f_m);
    fs = atoi(f_s);

    lh = atoi(l_h);
    lm = atoi(l_m);
    ls = atoi(l_s);

    if ( fh == lh && fm == lm ) {
        sprintf(ca_errmsg,"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk, %s,%s,%d",f,l,ls-fs) ;
        see_errlog(1000,ca_errmsg,RPT_TO_LOG,0,0) ;
        return ls-fs ;
    }
 
    f_time_fields.tm_mday = 0;
    f_time_fields.tm_mon  = 0;
    f_time_fields.tm_year = 0; 
    f_time_fields.tm_hour = fh;
    f_time_fields.tm_min  = fm;
    f_time_fields.tm_sec  = fs;

    l_time_fields.tm_mday = 0;
    l_time_fields.tm_mon  = 0;
    l_time_fields.tm_year = 0; 
    l_time_fields.tm_hour = lh;
    l_time_fields.tm_min  = lm;
    l_time_fields.tm_sec  = ls;

    f_sec = mktime(&f_time_fields);
    l_sec = mktime(&l_time_fields);

    sprintf(ca_errmsg,"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk, %s,%s,%d",f,l,(int)(l_sec-f_sec)) ;
    see_errlog(1000,ca_errmsg,RPT_TO_LOG,0,0) ;
    return l_sec-f_sec ;
}

int 
see_bar_calc_1s  (see_bar_t * p_bar,char * buf)
{
    return SEE_OK ;
}

int see_bar_calc_5s  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_10s (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_15s (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_30s (see_bar_t * p_bar,char * buf)
{
    return SEE_OK ;

}

int see_bar_calc_1f  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_3f  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_5f  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_10f (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_15f (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_30f (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_1h  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_2h  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_3h  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_4h  (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_d   (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_w   (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_m   (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_s   (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

int see_bar_calc_y   (see_bar_t * p_bar,char * buf)
{

    return SEE_OK ;
}

see_bar_t *
see_create_bar( char * p_future_id,char c_period )
{
    see_bar_t * kkk ;
    kkk = malloc(sizeof(see_bar_t)) ;              // 为每个future 分配2个bars 的内存 0表示前一个bar,1表示当前bar
    if (kkk == NULL ) { 
        see_errlog( 1000,"see_create_bar error!\n",RPT_TO_LOG,0,0 ) ; 
    }   
    memset(kkk->TradingDay,'\0',9) ;
    memset(kkk->ca_btime,'\0',9) ;
    memset(kkk->ActionDay,'\0',9) ;
    kkk->o = -1 ;
    kkk->c = -1 ;
    kkk->h = -1 ;
    kkk->l = -1 ;
    kkk->v = -1 ;
    
    return kkk ;
}

int
see_calc_bar( see_fut_block_t * p_block, char * buf, int period )
{
    int wr = 0 ;
    see_bar_t * p_bar0 ;
    see_bar_t * p_bar1 ;

    switch(period) {
        case  BAR_TICK :
            wr = 1 ;
            break ;
        case  BAR_1S :

        case  BAR_2S : 
            break ;

        case  BAR_3S :


        case  BAR_5S :


        case  BAR_10S :
            break ;

        case  BAR_15S :
            break ;

        case  BAR_30S :
        case  BAR_1F :

        case  BAR_2F :
        case  BAR_3F :   

        case  BAR_5F : 

        case  BAR_10F :
        case  BAR_15F :
        case  BAR_1H :

        case  BAR_2H :

        case  BAR_3H :
            break ;

        case  BAR_4H :


        case  BAR_5H :

        case  BAR_1D :
            p_bar0 = &p_block->bar_block_1d.bar0 ;
            p_bar1 = &p_block->bar_block_1d.bar1 ;
            p_bar0->o = 100+BAR_1S ;
            p_bar1->o = 101+BAR_1S ;
            break ;
        case  BAR_1W :
            p_bar0 = &p_block->bar_block_1w.bar0 ;
            p_bar1 = &p_block->bar_block_1w.bar1 ;
            p_bar0->o = 100+BAR_1S ;
            p_bar1->o = 101+BAR_1S ;
            break ;
        case  BAR_1M :
            p_bar0 = &p_block->bar_block_1m.bar0 ;
            p_bar1 = &p_block->bar_block_1m.bar1 ;
            p_bar0->o = 100+BAR_1M ;
            p_bar1->o = 101+BAR_1M ;
            break ;
        case  BAR_1J :
            p_bar0 = &p_block->bar_block_1j.bar0 ;
            p_bar1 = &p_block->bar_block_1j.bar1 ;
            p_bar0->o = 100+BAR_1J ;
            p_bar1->o = 101+BAR_1J ;
            break ;
        case  BAR_1Y :
            p_bar0 = &p_block->bar_block_1y.bar0 ;
            p_bar1 = &p_block->bar_block_1y.bar1 ;
            p_bar0->o = 100+BAR_1Y ;
            p_bar1->o = 101+BAR_1Y ;
            break ;
        default :
            break ;
    }
    return wr ;
}

int 
see_calc_k_bar( see_fut_block_t * p_block, char * buf, int period )
{
    int    num = 0 ;
    see_bar_t * p_bar0 ;
    see_bar_t * p_bar1 ;

    p_bar0 =  &p_block->bar_block[period].bar0 ;
    p_bar1 =  &p_block->bar_block[period].bar1 ;
    see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;

    switch(period) {
        case  BAR_TICK :
            break ;
        case  BAR_1S :
            p_bar0 = &p_block->bar_block_1s.bar0 ;
            p_bar1 = &p_block->bar_block_1s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_2S :
            p_bar0 = &p_block->bar_block_2s.bar0 ;
            p_bar1 = &p_block->bar_block_2s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_3S :
            p_bar0 = &p_block->bar_block_3s.bar0 ;
            p_bar1 = &p_block->bar_block_3s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_5S :
            p_bar0 = &p_block->bar_block_5s.bar0 ;
            p_bar1 = &p_block->bar_block_5s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_10S :
            p_bar0 = &p_block->bar_block_10s.bar0 ;
            p_bar1 = &p_block->bar_block_10s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_15S :
            p_bar0 = &p_block->bar_block_15s.bar0 ;
            p_bar1 = &p_block->bar_block_15s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_30S :
            p_bar0 = &p_block->bar_block_30s.bar0 ;
            p_bar1 = &p_block->bar_block_30s.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_1F :
            //p_bar0 = &p_block->bar_block_1f.bar0 ;
            //p_bar1 = &p_block->bar_block_1f.bar1 ;
            //p_bar0 = &p_block->bar_block[period].bar0 ;
            //p_bar1 = &p_block->bar_block[period].bar1 ;
            //see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_2F :
            p_bar0  = &p_block->bar_block_2f.bar0 ;
            p_bar1  = &p_block->bar_block_2f.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_3F :
            p_bar0  = &p_block->bar_block_3f.bar0 ;
            p_bar1  = &p_block->bar_block_3f.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_5F :
            p_bar0  = &p_block->bar_block_5f.bar0 ;
            p_bar1  = &p_block->bar_block_5f.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_10F :
            p_bar0 =  &p_block->bar_block_10f.bar0 ;
            p_bar1 =  &p_block->bar_block_10f.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_15F :
            //p_bar0 =  &p_block->bar_block_15f.bar0 ;
            //p_bar1 =  &p_block->bar_block_15f.bar1 ;
            //see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_30F :
            //p_bar0 =  &p_block->bar_block[period].bar0 ;
            //p_bar1 =  &p_block->bar_block[period].bar1 ;
            //see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_1H :
            p_bar0 =  &p_block->bar_block_1h.bar0 ;
            p_bar1 =  &p_block->bar_block_1h.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_2H :
            p_bar0 =  &p_block->bar_block_2h.bar0 ;
            p_bar1 =  &p_block->bar_block_2h.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_3H :
            p_bar0 =  &p_block->bar_block_3h.bar0 ;
            p_bar1 =  &p_block->bar_block_3h.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_4H :
            p_bar0 =  &p_block->bar_block_4h.bar0 ;
            p_bar1 =  &p_block->bar_block_4h.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_5H :
            p_bar0 =  &p_block->bar_block_5h.bar0 ;
            p_bar1 =  &p_block->bar_block_5h.bar1 ;
            see_calc_bar_block( p_block, p_bar0, p_bar1, buf, period ) ;
            break ;
        case  BAR_1D :
        case  BAR_1W :
        case  BAR_1M :
        case  BAR_1J :
        case  BAR_1Y :
            break ;
        default :
            break ;
    }
    return num ;
}

/*
* i_sgm_idx：用于回传，返回当前的tick是在哪个交易时间段内
* 收到一个tick，就需要调用一次is_mkt_open，更新 block里的 i_sgm_idx c_oc_flag
*/
int is_mkt_open( see_fut_block_t *p_block, char *buf )
{
    int j = 0 ;
    int b ;
    int e ;
    struct CThostFtdcDepthMarketDataField * tick ;
    tick = (struct CThostFtdcDepthMarketDataField *)buf ;

    j = 0 ;
    while ( j < SEE_SGM_NUM ) {
        if ( p_block->pt_hour->pt_segments[j] != NULL )
        {
            b = memcmp(tick->UpdateTime, p_block->pt_hour->pt_segments[j]->ca_b,8)  ;
            e = memcmp(tick->UpdateTime, p_block->pt_hour->pt_segments[j]->ca_e,8)  ;
            if (b >=0 && e<0 && p_block->pt_hour->pt_segments[j]->c_oc_flag == 'o' ){
                p_block->i_sgm_idx = j ;
                p_block->c_oc_flag = 'o' ;
                return SEE_MKT_OPEN ; 
            }
            j++ ;
        }else{
            p_block->i_sgm_idx = 0 ;
            p_block->c_oc_flag = 'c' ;
            return SEE_MKT_CLOSE ;
        }
    }
    p_block->i_sgm_idx = 0 ;
    p_block->c_oc_flag = 'c' ;
    return SEE_MKT_CLOSE ;
}

int is_weekend( char * pc_day)   //很耗时！！！！
{
    struct tm * p_time ;
    struct tm cur_time;
    time_t   rawtime ;
    char ca_y[5] = "\0\0\0\0\0" ;
    char ca_m[3] = "\0\0\0" ;
    char ca_d[3] = "\0\0\0" ; 

    memcpy(ca_y,pc_day,4);
    memcpy(ca_m,pc_day+4,2);
    memcpy(ca_d,pc_day+6,2);

    cur_time.tm_mday = atoi(ca_d);
    cur_time.tm_mon  = atoi(ca_m)-1;
    cur_time.tm_year = atoi(ca_y)-1900; 
    cur_time.tm_hour = 0;  
    cur_time.tm_min  = 0;  
    cur_time.tm_sec  = 0;
    rawtime = mktime(&cur_time);

    p_time =localtime(&rawtime);
    if(  p_time->tm_wday == 6 || p_time->tm_wday == 0 ) { return 1 ; } else { return 0 ; } 
}
int is_holiday( char * pc_day )
{
    return 0 ;
} 

int is_notrade( see_fut_block_t * p_block,char * time0 )  //交易时间段判断
{
    int i = 0 ;
    int sss ;
    int b,e ;

    sss = see_time_to_int( time0 ) ;
    while ( i < 10 ) {
        b = p_block->trade_time.time_segment[i].b ;
        e = p_block->trade_time.time_segment[i].e ;
        if( sss >= b && sss< e ){ return 0; }
        i++ ;
    }  
    if ( sss >= 2085916953 && sss < 2085938553 ) {   // between 15:00:00 ----- 21:00:00
        return 2;
    } 
    return 1;  //不在交易时间段内
}

int 
see_save_bar( see_bar_t * p_bar,int x,int period)
{
    // int tt;
    // tt = x * period ;
//    see_errlog(1000,(char *)"save bar !",RPT_TO_LOG,(char *)p_bar,sizeof(see_bar_t)) ;    
    return 0 ;
}

int
see_handle_bars(PT_BLOCKS pt_blocks, PC_FUTURES pc_futures, char * buf )
{
    int     i_rtn ;
    int     i_idx ;
    int     uiui;
    int     mimi;
    char    ca_UpdateTime[9];
    char    ca_TradingDay[9];
    struct CThostFtdcDepthMarketDataField * tick ;
    tick = (struct CThostFtdcDepthMarketDataField *)buf ;

    i_idx = see_get_future_index(pc_futures,tick->InstrumentID) ;   //i_idx 合约所在的数组下标
    if( i_idx == SEE_ERROR )
    {
        see_errlog(1000,(char *) "see_handle_bars() -> see_get_future_index()  error!!",RPT_TO_LOG,0,0) ;
        sprintf(ca_errmsg,"future %s is not in pc_futures: tick->InstrumentID: %s",tick->InstrumentID,tick->InstrumentID) ;
        see_errlog(1000,ca_errmsg,RPT_TO_LOG,0,0) ;
        exit(-1) ;
    }

    i_rtn = is_mkt_open ( pt_blocks[i_idx],buf ) ;   // 修改 block->c_oc_flag 以及 block->i_sgm_i_idx
    if ( i_rtn == SEE_MKT_CLOSE ) {
        return 0 ;
    }

    /* -----------------------  异常处理 ------------------------- */
    if( memcmp(ca_UpdateTime,"22:59",5) ==0 && memcmp(tick->UpdateTime,"23:29",5) ==0  ) {return 0;} //异常处理
    if( memcmp(tick->TradingDay,ca_TradingDay,8) ==0 )
    {
        uiui = see_time_to_int(tick->UpdateTime) ;
        mimi = see_time_to_int(ca_UpdateTime) ;
        if ( uiui < mimi ) { return 0; }
    }  // 异常处理：下一个K的时间比前一个K的时间还早，那就直接返回。
    memcpy(ca_TradingDay,tick->TradingDay,8);
    memcpy(ca_UpdateTime,tick->UpdateTime,8);
    /* -----------------------  异常处理 ------------------------- */

    // see_calc_k_bar(pt_blocks[i_idx],buf,0) ;                 // 这里的0表示tick 1表示 1S 2S 5S 10S 15S 30S 1F 2F 3F 5F
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_2S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_3S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_5S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_10S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_15S) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_30S) ;
    see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1F) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_2F) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_3F) ;
    see_calc_k_bar(pt_blocks[i_idx],buf,BAR_5F) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_10F) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_15F) ;
    see_calc_k_bar(pt_blocks[i_idx],buf,BAR_30F) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1H) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_2H) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_3H) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_4H) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_5H) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1D) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1W) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1J) ;
    // see_calc_k_bar(pt_blocks[i_idx],buf,BAR_1Y) ;
    // see_save_k_bar(pt_blocks[i_idx]) ;
    // see_run_strategy(pt_blocks[i_idx]) ;
    return 0 ;
}

/*
rtn = 0; 表示为 第0秒的第0个tick,所以，这个tick的volume应该算到前一个K柱里
rtn = 1; 表示为 已经不是第0秒的第0个tick，所以这个tick的volume应该算到当前的K柱里
*/
int 
see_first_tick(     see_fut_block_t     *p_block, 
                    char            *buf, 
                    see_bar_t       *p_bar0,  //暂时没有用到
                    see_bar_t       *p_bar1, 
                    int             period )
{
    int  rtn = 0 ;
    char f_h[3] = "\0\0\0" ;
    char f_m[3] = "\0\0\0" ;
    char f_s[3] = "\0\0\0" ;

    int mo;
//    int fh;
    int fm;
    int fs;
    char * f ;
    struct CThostFtdcDepthMarketDataField * tick ;
    tick = (struct CThostFtdcDepthMarketDataField *)buf ;

    int  i_sgm_idx = p_block->i_sgm_idx ;

    f = tick->TradingDay ;
//    memcpy(p_bar0->TradingDay,f,8) ;
    memcpy(p_bar1->TradingDay,f,8) ;

    f = tick->ActionDay ;
//    memcpy(p_bar0->ActionDay,f,8) ;
    memcpy(p_bar1->ActionDay,f,8) ;

    f = tick->UpdateTime ;
    memcpy(f_h,f,2);
    memcpy(f_m,f+3,2);
    memcpy(f_s,f+6,2);

//    fh = atoi(f_h);
    fm = atoi(f_m);
    fs = atoi(f_s);

    switch(period) {
        case  BAR_TICK :
            break ;
        case  BAR_1S :
            NEW_BAR1;
            if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            break ;
        case  BAR_2S :
            NEW_BAR1 ;
            mo = fs%2 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_3S :
            NEW_BAR1 ;
            mo = fs%3 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_5S :
            NEW_BAR1 ;
            mo = fs%5 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_10S :
            NEW_BAR1 ;
            mo = fs%10 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_15S :
            NEW_BAR1 ;
            mo = fs%15 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_30S :
            NEW_BAR1 ;
            mo = fs%30 ;
            fs = fs - mo ;
            if( mo == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }else{
                memset(f_s,'\0',3);
                sprintf(f_s,"%02d",fs) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            }
            break ;
        case  BAR_1F :
            NEW_BAR1;
            if ( memcmp( tick->UpdateTime+6,"00",2 ) == 0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            } else {
                memset(f_s,'0',3);
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1;
            } 
            break ;

        case  BAR_2F :
            NEW_BAR1 ;
            mo = fm%2 ;
            fm = fm - mo ;
            if ( mo==0 && memcmp(tick->UpdateTime+6,"00",2)==0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            } else {
                memset(f_m,'\0',3);
                memset(f_s,'0',3);
                sprintf(f_m,"%02d",fm) ;
                memcpy(p_bar1->ca_btime+3,f_m,2) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1 ;
            }
            break ;
        case  BAR_3F :
            NEW_BAR1 ;
            mo = fm%3 ;
            fm = fm - mo ;
            if ( mo==0 && memcmp(tick->UpdateTime+6,"00",2)==0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            } else {
                memset(f_m,'\0',3);
                memset(f_s,'0',3);
                sprintf(f_m,"%02d",fm) ;
                memcpy(p_bar1->ca_btime+3,f_m,2) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1 ;
            }
            break ;
        case  BAR_5F :
            NEW_BAR1 ;
            mo = fm%5 ;
            fm = fm - mo ;
            if ( mo==0 && memcmp(tick->UpdateTime+6,"00",2)==0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            } else {
                memset(f_m,'\0',3);
                memset(f_s,'0',3);
                sprintf(f_m,"%02d",fm) ;
                memcpy(p_bar1->ca_btime+3,f_m,2) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1 ;
            }
            break ;

        case  BAR_10F :
            NEW_BAR1 ;
            mo = fm%10 ;
            fm = fm - mo ;
            if ( mo==0 && memcmp(tick->UpdateTime+6,"00",2)==0 ) {
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; } 
            } else {
                memset(f_m,'\0',3);
                memset(f_s,'0',3);
                sprintf(f_m,"%02d",fm) ;
                memcpy(p_bar1->ca_btime+3,f_m,2) ;
                memcpy(p_bar1->ca_btime+6,f_s,2) ;
                rtn = 1 ;
            }    
            break ;

        case  BAR_15F :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_15F_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_15F_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; } 
            }
            break ;

        case  BAR_30F :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_30F_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_30F_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; } 
            }
            break ;

        case  BAR_1H :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1H_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1H_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; } 
            }
            break ;
        case  BAR_2H :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_2H_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_2H_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }
            break ;

        case  BAR_3H :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_3H_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_3H_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }
            break ;

        case  BAR_4H :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_4H_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_4H_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }
            break ;

        case  BAR_5H :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_5H_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_5H_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }
            break ;
        case  BAR_1D :
            NEW_BAR1 ;
            memcpy(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1D_start,8) ;
            memcpy(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1D_end,8) ;
            if (memcmp(tick->UpdateTime,p_bar1->ca_btime,8)==0 ){
                if( tick->UpdateMillisec == 0 ) { rtn = 0; }else{ rtn = 1; }
            }
            break ;
        case  BAR_1W :
            NEW_BAR1 ;
            break ;
        case  BAR_1M :
            NEW_BAR1 ;
            break ;
        case  BAR_1J :
            NEW_BAR1 ;
            break ;
        case  BAR_1Y :
            NEW_BAR1 ;
            break ;
        default :
            break ;
    }
    p_bar1->vsum = tick->Volume ;
    return rtn ;
}

int 
see_calc_bar_block( see_fut_block_t  * p_block, 
                   see_bar_t    * p_bar0,
                   see_bar_t    * p_bar1,
                   char         * buf,
                   int          period )
{
    int             i_kbar_num ;
    char            ca_ohlc_file[1024] ;

    struct CThostFtdcDepthMarketDataField * tick ;
    tick = (struct CThostFtdcDepthMarketDataField *)buf ;
   
    if( p_block->c_oc_flag == 'o' ) {  // 在交易时间段内
        if( p_bar1->o == SEE_NULL )    // 程序开启后的第一个tick
        {
            see_first_tick(p_block,buf,p_bar0,p_bar1,period) ;
            memcpy((char *)p_bar0,p_bar1,sizeof(see_bar_t)) ;
            return 0 ;
        }

        i_kbar_num = is_same_k_bar(p_block,p_bar1,buf,period) ;
        if( i_kbar_num == 0 ){  //同一个K
            UPDATE_BAR1 ;
        }else{ // 下一个K

                memcpy((char *)p_bar0,p_bar1,sizeof(see_bar_t)) ;
                if( see_first_tick(p_block,buf,p_bar0,p_bar1,period) == 0 ) {  // 新K柱，tick->UpdateTime的值可能不是 起始的时间
                    p_bar0->v    = tick->Volume - p_bar0->vsum ;
                    p_bar0->vsum = tick->Volume ;
                }else{
                    p_bar1->v    = tick->Volume - p_bar0->vsum ;
                }   // 根据 see_first_tick 返回 tick的 UpdateMillisec 是 0 还是 500，来处理 Volume

                //see_save_bin("../../dat/hloc.bin",(char *)p_bar0,sizeof(see_bar_t));
                memset(ca_ohlc_file,'\0',512) ;
                memset(ca_errmsg,'\0',512) ;
                //sprintf(ca_ohlc_file,"%s-%s-%d%c",p_block->InstrumentID,p_bar0->TradingDay,p_block->bar_block[period].i_bar_type,
                //        p_block->bar_block[period].c_bar_type) ;
                sprintf(ca_ohlc_file,"%s-%s-%d",p_block->InstrumentID,p_bar0->TradingDay,period) ;
                sprintf(ca_errmsg,"%s:%10.2f:%10.2f:%10.2f:%10.2f\n",p_bar0->ca_btime,p_bar0->o,p_bar0->h,p_bar0->l,p_bar0->c) ;
                see_save_line(ca_ohlc_file,ca_errmsg) ;
                // see_errlog(1000,ca_errmsg,RPT_TO_LOG,0,0) ;

                
/*
                hh[i_index] = p_bar0->h ;
                ll[i_index] = p_bar0->l ;
                oo[i_index] = p_bar0->o ;
                cc[i_index] = p_bar0->c ;
*/

                i_index ++ ;
        }
        return 0 ;
    }
    return 0 ;
}

int is_same_k_bar ( see_fut_block_t     * p_block, 
                    see_bar_t       * p_bar1,
                    char            * buf,
                    int             period )
{
    int  i_rtn = 1 ;
    int  i_sgm_idx ;
    char f_h[3] = "\0\0\0" ;
    char f_m[3] = "\0\0\0" ;
    char f_s[3] = "\0\0\0" ;

    char b_h[3] = "\0\0\0" ;
    char b_m[3] = "\0\0\0" ;
    char b_s[3] = "\0\0\0" ;

    int fh;
    int fm;
    int fs;

    int bh;
    int bm;
    int bs;

    char * f ;
    char * b ;
    struct CThostFtdcDepthMarketDataField * tick ;
    tick = (struct CThostFtdcDepthMarketDataField *)buf ;

    i_sgm_idx = p_block->i_sgm_idx ;       // 从p_block中取 i_sgm_idx值 

    if( p_bar1->o == SEE_NULL ) { return -1; }

    b = p_bar1->ca_btime ;
    memcpy(b_h,b,2);
    memcpy(b_m,b+3,2);
    memcpy(b_s,b+6,2);
    bh = atoi(b_h);
    bm = atoi(b_m);
    bs = atoi(b_s);
    f = tick->UpdateTime ;
    memcpy(f_h,f,2);
    memcpy(f_m,f+3,2);
    memcpy(f_s,f+6,2);
    fh = atoi(f_h);
    fm = atoi(f_m);
    fs = atoi(f_s);
    
    switch(period) {
        case  BAR_TICK :
            break ;
        case  BAR_1S :
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                //p_block->bar_block_1s.c_save = 'n' ;
                p_block->bar_block[period].c_save = 'n' ;
            }else{
                //p_block->bar_block_1s.c_save = 's' ;
                p_block->bar_block[period].c_save = 's' ;
            }
            break ;
        case  BAR_2S :
            fs = fs - fs%2 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_2s.c_save = 'n' ;
            }else{
                p_block->bar_block_2s.c_save = 's' ;
            }
            break ;
        case  BAR_3S :
            fs = fs - fs%3 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_3s.c_save = 'n' ;
            }else{
                p_block->bar_block_3s.c_save = 's' ;
            }
            break ;
        case  BAR_5S :
            fs = fs - fs%5 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_5s.c_save = 'n' ;
            }else{
                p_block->bar_block_5s.c_save = 's' ;
            }
            break ;
        case  BAR_10S :
            fs = fs - fs%10 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_10s.c_save = 'n' ;
            }else{
                p_block->bar_block_10s.c_save = 's' ;
            }
            break ;
        case  BAR_15S :
            fs = fs - fs%15 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_15s.c_save = 'n' ;
            }else{
                p_block->bar_block_15s.c_save = 's' ;
            }
            break ;
        case  BAR_30S :
            fs = fs - fs%30 ;
            i_rtn = (fh-bh)*3600+(fm-bm)*60+fs-bs;
            if ( i_rtn ==0 ) {
                p_block->bar_block_30s.c_save = 'n' ;
            }else{
                p_block->bar_block_30s.c_save = 's' ;
            }
            break ;
        case  BAR_1F :
            i_rtn = (fh-bh)*60+fm-bm;
            if ( i_rtn ==0 ) {
                //p_block->bar_block_1f.c_save = 'n' ;
                p_block->bar_block[period].c_save = 'n' ;
            }else{
                //p_block->bar_block_1f.c_save = 's' ;
                p_block->bar_block[period].c_save = 's' ;
            }
            break ;
        case  BAR_2F :
            fm = fm - fm%2 ;
            i_rtn = (fh-bh)*60+fm-bm;
            if ( i_rtn ==0 ) {
                p_block->bar_block_2f.c_save = 'n' ;
            }else{
                p_block->bar_block_2f.c_save = 's' ;
            }
            break ;
        case  BAR_3F :
            fm = fm - fm%3 ;
            i_rtn = (fh-bh)*60+fm-bm;
            if ( i_rtn ==0 ) {
                p_block->bar_block_3f.c_save = 'n' ;
            }else{
                p_block->bar_block_3f.c_save = 's' ;
            }
            break ;
        case  BAR_5F :
            fm = fm - fm%5 ;
            i_rtn = (fh-bh)*60+fm-bm;
            if ( i_rtn ==0 ) {
                p_block->bar_block_5f.c_save = 'n' ;
            }else{
                p_block->bar_block_5f.c_save = 's' ;
            }
            break ;
        case  BAR_10F :
            fm = fm - fm%10 ;
            i_rtn = (fh-bh)*60+fm-bm;
            if ( i_rtn ==0 ) {
                p_block->bar_block_10f.c_save = 'n' ;
            }else{
                p_block->bar_block_10f.c_save = 's' ;
            }
            break ;
        case  BAR_15F :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_15F_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_15F_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_15f.c_save = 'n' ;
            } else { 
                i_rtn = 1 ; 
                p_block->bar_block_15f.c_save = 's' ;
            }
            break ;
        case  BAR_30F :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_30F_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_30F_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_30f.c_save = 'n' ;
            } else { 
                i_rtn = 1 ;
                p_block->bar_block_30f.c_save = 's' ;
            }
            break ;
        case  BAR_1H :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1H_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1H_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_1h.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_1h.c_save = 's' ;
            }
            break ;
        case  BAR_2H :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_2H_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_2H_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_2h.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_2h.c_save = 's' ;
            }
            break ;
        case  BAR_3H :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_3H_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_3H_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_3h.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_3h.c_save = 's' ;
            }
            break ;
        case  BAR_4H :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_4H_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_4H_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_4h.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_4h.c_save = 's' ;
            }
            break ;
        case  BAR_5H :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_5H_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_5H_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_5h.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_5h.c_save = 's' ;
            }
            break ;
        case  BAR_1D :
            if( memcmp(p_bar1->ca_btime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1D_start,8) ==0 ||
                memcmp(p_bar1->ca_etime,p_block->pt_hour->pt_segments[i_sgm_idx]->ca_1D_end,8) ==0 ) {
                i_rtn = 0 ;
                p_block->bar_block_1d.c_save = 'n' ;
            } else {
                i_rtn = 1 ;
                p_block->bar_block_1d.c_save = 's' ;
            }
            break ;
        case  BAR_1W :
            break ;
        case  BAR_1M :
            break ;
        case  BAR_1J :
            break ;
        case  BAR_1Y :
            break ;
        default :
            break ;
    }
    return i_rtn ;
}
