// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uquantapi.proto

#ifndef PROTOBUF_uquantapi_2eproto__INCLUDED
#define PROTOBUF_uquantapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_uquantapi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHelloRequestImpl();
void InitDefaultsHelloRequest();
void InitDefaultsHelloReplyImpl();
void InitDefaultsHelloReply();
void InitDefaultskBarRequestImpl();
void InitDefaultskBarRequest();
void InitDefaultskBarImpl();
void InitDefaultskBar();
void InitDefaultskBarReplyImpl();
void InitDefaultskBarReply();
inline void InitDefaults() {
  InitDefaultsHelloRequest();
  InitDefaultsHelloReply();
  InitDefaultskBarRequest();
  InitDefaultskBar();
  InitDefaultskBarReply();
}
}  // namespace protobuf_uquantapi_2eproto
namespace uquantapi {
class HelloReply;
class HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class kBar;
class kBarDefaultTypeInternal;
extern kBarDefaultTypeInternal _kBar_default_instance_;
class kBarReply;
class kBarReplyDefaultTypeInternal;
extern kBarReplyDefaultTypeInternal _kBarReply_default_instance_;
class kBarRequest;
class kBarRequestDefaultTypeInternal;
extern kBarRequestDefaultTypeInternal _kBarRequest_default_instance_;
}  // namespace uquantapi
namespace uquantapi {

// ===================================================================

class HelloRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uquantapi.HelloRequest) */ {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HelloRequest* other);
  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:uquantapi.HelloRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_uquantapi_2eproto::TableStruct;
  friend void ::protobuf_uquantapi_2eproto::InitDefaultsHelloRequestImpl();
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uquantapi.HelloReply) */ {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HelloReply* other);
  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:uquantapi.HelloReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_uquantapi_2eproto::TableStruct;
  friend void ::protobuf_uquantapi_2eproto::InitDefaultsHelloReplyImpl();
};
// -------------------------------------------------------------------

class kBarRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uquantapi.kBarRequest) */ {
 public:
  kBarRequest();
  virtual ~kBarRequest();

  kBarRequest(const kBarRequest& from);

  inline kBarRequest& operator=(const kBarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kBarRequest(kBarRequest&& from) noexcept
    : kBarRequest() {
    *this = ::std::move(from);
  }

  inline kBarRequest& operator=(kBarRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kBarRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kBarRequest* internal_default_instance() {
    return reinterpret_cast<const kBarRequest*>(
               &_kBarRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(kBarRequest* other);
  friend void swap(kBarRequest& a, kBarRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kBarRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  kBarRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const kBarRequest& from);
  void MergeFrom(const kBarRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(kBarRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  #if LANG_CXX11
  void set_start(::std::string&& value);
  #endif
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // string end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  const ::std::string& end() const;
  void set_end(const ::std::string& value);
  #if LANG_CXX11
  void set_end(::std::string&& value);
  #endif
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  ::std::string* mutable_end();
  ::std::string* release_end();
  void set_allocated_end(::std::string* end);

  // int32 frequency = 4;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 4;
  ::google::protobuf::int32 frequency() const;
  void set_frequency(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:uquantapi.kBarRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr end_;
  ::google::protobuf::int32 frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_uquantapi_2eproto::TableStruct;
  friend void ::protobuf_uquantapi_2eproto::InitDefaultskBarRequestImpl();
};
// -------------------------------------------------------------------

class kBar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uquantapi.kBar) */ {
 public:
  kBar();
  virtual ~kBar();

  kBar(const kBar& from);

  inline kBar& operator=(const kBar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kBar(kBar&& from) noexcept
    : kBar() {
    *this = ::std::move(from);
  }

  inline kBar& operator=(kBar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kBar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kBar* internal_default_instance() {
    return reinterpret_cast<const kBar*>(
               &_kBar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(kBar* other);
  friend void swap(kBar& a, kBar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kBar* New() const PROTOBUF_FINAL { return New(NULL); }

  kBar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const kBar& from);
  void MergeFrom(const kBar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(kBar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string b = 1;
  void clear_b();
  static const int kBFieldNumber = 1;
  const ::std::string& b() const;
  void set_b(const ::std::string& value);
  #if LANG_CXX11
  void set_b(::std::string&& value);
  #endif
  void set_b(const char* value);
  void set_b(const char* value, size_t size);
  ::std::string* mutable_b();
  ::std::string* release_b();
  void set_allocated_b(::std::string* b);

  // string e = 2;
  void clear_e();
  static const int kEFieldNumber = 2;
  const ::std::string& e() const;
  void set_e(const ::std::string& value);
  #if LANG_CXX11
  void set_e(::std::string&& value);
  #endif
  void set_e(const char* value);
  void set_e(const char* value, size_t size);
  ::std::string* mutable_e();
  ::std::string* release_e();
  void set_allocated_e(::std::string* e);

  // double o = 3;
  void clear_o();
  static const int kOFieldNumber = 3;
  double o() const;
  void set_o(double value);

  // double h = 4;
  void clear_h();
  static const int kHFieldNumber = 4;
  double h() const;
  void set_h(double value);

  // double l = 5;
  void clear_l();
  static const int kLFieldNumber = 5;
  double l() const;
  void set_l(double value);

  // double c = 6;
  void clear_c();
  static const int kCFieldNumber = 6;
  double c() const;
  void set_c(double value);

  // @@protoc_insertion_point(class_scope:uquantapi.kBar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr b_;
  ::google::protobuf::internal::ArenaStringPtr e_;
  double o_;
  double h_;
  double l_;
  double c_;
  mutable int _cached_size_;
  friend struct ::protobuf_uquantapi_2eproto::TableStruct;
  friend void ::protobuf_uquantapi_2eproto::InitDefaultskBarImpl();
};
// -------------------------------------------------------------------

class kBarReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:uquantapi.kBarReply) */ {
 public:
  kBarReply();
  virtual ~kBarReply();

  kBarReply(const kBarReply& from);

  inline kBarReply& operator=(const kBarReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kBarReply(kBarReply&& from) noexcept
    : kBarReply() {
    *this = ::std::move(from);
  }

  inline kBarReply& operator=(kBarReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kBarReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kBarReply* internal_default_instance() {
    return reinterpret_cast<const kBarReply*>(
               &_kBarReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(kBarReply* other);
  friend void swap(kBarReply& a, kBarReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kBarReply* New() const PROTOBUF_FINAL { return New(NULL); }

  kBarReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const kBarReply& from);
  void MergeFrom(const kBarReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(kBarReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .uquantapi.kBar kk = 1;
  int kk_size() const;
  void clear_kk();
  static const int kKkFieldNumber = 1;
  const ::uquantapi::kBar& kk(int index) const;
  ::uquantapi::kBar* mutable_kk(int index);
  ::uquantapi::kBar* add_kk();
  ::google::protobuf::RepeatedPtrField< ::uquantapi::kBar >*
      mutable_kk();
  const ::google::protobuf::RepeatedPtrField< ::uquantapi::kBar >&
      kk() const;

  // @@protoc_insertion_point(class_scope:uquantapi.kBarReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::uquantapi::kBar > kk_;
  mutable int _cached_size_;
  friend struct ::protobuf_uquantapi_2eproto::TableStruct;
  friend void ::protobuf_uquantapi_2eproto::InitDefaultskBarReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:uquantapi.HelloRequest.name)
  return name_.GetNoArena();
}
inline void HelloRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.HelloRequest.name)
}
#if LANG_CXX11
inline void HelloRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.HelloRequest.name)
}
#endif
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.HelloRequest.name)
}
inline ::std::string* HelloRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.HelloRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:uquantapi.HelloRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:uquantapi.HelloReply.message)
  return message_.GetNoArena();
}
inline void HelloReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.HelloReply.message)
}
#if LANG_CXX11
inline void HelloReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.HelloReply.message)
}
#endif
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.HelloReply.message)
}
inline void HelloReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.HelloReply.message)
}
inline ::std::string* HelloReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.HelloReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:uquantapi.HelloReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.HelloReply.message)
}

// -------------------------------------------------------------------

// kBarRequest

// string id = 1;
inline void kBarRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kBarRequest::id() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBarRequest.id)
  return id_.GetNoArena();
}
inline void kBarRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.kBarRequest.id)
}
#if LANG_CXX11
inline void kBarRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.kBarRequest.id)
}
#endif
inline void kBarRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.kBarRequest.id)
}
inline void kBarRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.kBarRequest.id)
}
inline ::std::string* kBarRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.kBarRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kBarRequest::release_id() {
  // @@protoc_insertion_point(field_release:uquantapi.kBarRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kBarRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.kBarRequest.id)
}

// string start = 2;
inline void kBarRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kBarRequest::start() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBarRequest.start)
  return start_.GetNoArena();
}
inline void kBarRequest::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.kBarRequest.start)
}
#if LANG_CXX11
inline void kBarRequest::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.kBarRequest.start)
}
#endif
inline void kBarRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.kBarRequest.start)
}
inline void kBarRequest::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.kBarRequest.start)
}
inline ::std::string* kBarRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.kBarRequest.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kBarRequest::release_start() {
  // @@protoc_insertion_point(field_release:uquantapi.kBarRequest.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kBarRequest::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.kBarRequest.start)
}

// string end = 3;
inline void kBarRequest::clear_end() {
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kBarRequest::end() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBarRequest.end)
  return end_.GetNoArena();
}
inline void kBarRequest::set_end(const ::std::string& value) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.kBarRequest.end)
}
#if LANG_CXX11
inline void kBarRequest::set_end(::std::string&& value) {
  
  end_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.kBarRequest.end)
}
#endif
inline void kBarRequest::set_end(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.kBarRequest.end)
}
inline void kBarRequest::set_end(const char* value, size_t size) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.kBarRequest.end)
}
inline ::std::string* kBarRequest::mutable_end() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.kBarRequest.end)
  return end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kBarRequest::release_end() {
  // @@protoc_insertion_point(field_release:uquantapi.kBarRequest.end)
  
  return end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kBarRequest::set_allocated_end(::std::string* end) {
  if (end != NULL) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.kBarRequest.end)
}

// int32 frequency = 4;
inline void kBarRequest::clear_frequency() {
  frequency_ = 0;
}
inline ::google::protobuf::int32 kBarRequest::frequency() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBarRequest.frequency)
  return frequency_;
}
inline void kBarRequest::set_frequency(::google::protobuf::int32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:uquantapi.kBarRequest.frequency)
}

// -------------------------------------------------------------------

// kBar

// string b = 1;
inline void kBar::clear_b() {
  b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kBar::b() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.b)
  return b_.GetNoArena();
}
inline void kBar::set_b(const ::std::string& value) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.kBar.b)
}
#if LANG_CXX11
inline void kBar::set_b(::std::string&& value) {
  
  b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.kBar.b)
}
#endif
inline void kBar::set_b(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.kBar.b)
}
inline void kBar::set_b(const char* value, size_t size) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.kBar.b)
}
inline ::std::string* kBar::mutable_b() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.kBar.b)
  return b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kBar::release_b() {
  // @@protoc_insertion_point(field_release:uquantapi.kBar.b)
  
  return b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kBar::set_allocated_b(::std::string* b) {
  if (b != NULL) {
    
  } else {
    
  }
  b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.kBar.b)
}

// string e = 2;
inline void kBar::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kBar::e() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.e)
  return e_.GetNoArena();
}
inline void kBar::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uquantapi.kBar.e)
}
#if LANG_CXX11
inline void kBar::set_e(::std::string&& value) {
  
  e_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:uquantapi.kBar.e)
}
#endif
inline void kBar::set_e(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uquantapi.kBar.e)
}
inline void kBar::set_e(const char* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uquantapi.kBar.e)
}
inline ::std::string* kBar::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:uquantapi.kBar.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kBar::release_e() {
  // @@protoc_insertion_point(field_release:uquantapi.kBar.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kBar::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:uquantapi.kBar.e)
}

// double o = 3;
inline void kBar::clear_o() {
  o_ = 0;
}
inline double kBar::o() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.o)
  return o_;
}
inline void kBar::set_o(double value) {
  
  o_ = value;
  // @@protoc_insertion_point(field_set:uquantapi.kBar.o)
}

// double h = 4;
inline void kBar::clear_h() {
  h_ = 0;
}
inline double kBar::h() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.h)
  return h_;
}
inline void kBar::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:uquantapi.kBar.h)
}

// double l = 5;
inline void kBar::clear_l() {
  l_ = 0;
}
inline double kBar::l() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.l)
  return l_;
}
inline void kBar::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:uquantapi.kBar.l)
}

// double c = 6;
inline void kBar::clear_c() {
  c_ = 0;
}
inline double kBar::c() const {
  // @@protoc_insertion_point(field_get:uquantapi.kBar.c)
  return c_;
}
inline void kBar::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:uquantapi.kBar.c)
}

// -------------------------------------------------------------------

// kBarReply

// repeated .uquantapi.kBar kk = 1;
inline int kBarReply::kk_size() const {
  return kk_.size();
}
inline void kBarReply::clear_kk() {
  kk_.Clear();
}
inline const ::uquantapi::kBar& kBarReply::kk(int index) const {
  // @@protoc_insertion_point(field_get:uquantapi.kBarReply.kk)
  return kk_.Get(index);
}
inline ::uquantapi::kBar* kBarReply::mutable_kk(int index) {
  // @@protoc_insertion_point(field_mutable:uquantapi.kBarReply.kk)
  return kk_.Mutable(index);
}
inline ::uquantapi::kBar* kBarReply::add_kk() {
  // @@protoc_insertion_point(field_add:uquantapi.kBarReply.kk)
  return kk_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::uquantapi::kBar >*
kBarReply::mutable_kk() {
  // @@protoc_insertion_point(field_mutable_list:uquantapi.kBarReply.kk)
  return &kk_;
}
inline const ::google::protobuf::RepeatedPtrField< ::uquantapi::kBar >&
kBarReply::kk() const {
  // @@protoc_insertion_point(field_list:uquantapi.kBarReply.kk)
  return kk_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace uquantapi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uquantapi_2eproto__INCLUDED
